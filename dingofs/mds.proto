// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "dingofs/error.proto";

package dingofs.pb.mds;

option cc_generic_services = true;
option go_package = "dingofs/proto/mds";

enum Role {
  ROLE_MDS = 0;
  ROLE_CLIENT = 1;
  ROLE_CACHE_MEMBER = 2;
}

message Location {
  string host = 1;
  int32 port = 2;
}

message MDS {
  enum State {
    INIT = 0;
    NORMAL = 1;
    ABNORMAL = 2;
    STOP = 3;
  }

  int64 id = 1;
  Location location = 2;

  State state = 4;

  uint64 last_online_time_ms = 10;
  bool is_online = 11;
}

message Client {
  string id = 1;
  string hostname = 2;
  uint32 port = 3;
  string mountpoint = 4;
  string fs_name = 5;
  string ip = 6;

  uint64 last_online_time_ms = 10;
}

enum CacheGroupMemberState {
  CacheGroupMemberStateUnknown = 0;
  CacheGroupMemberStateOnline = 1;
  CacheGroupMemberStateUnstable = 2;
  CacheGroupMemberStateOffline = 3;
};

message CacheGroupMember {
  string member_id = 1;
  string ip = 2;
  uint32 port = 3;
  uint32 weight = 4;
  uint64 create_time_s = 5;
  uint64 last_online_time_ms = 6;
  CacheGroupMemberState state = 7;
  optional string group_name = 8; // belong to which cache group
  bool locked = 9;                // member_id bind ip:port

  // when change field, need to update version
  uint64 version = 30;
};

enum FsType {
  S3 = 0;    //  use s3 as backend data store
  RADOS = 1; // use ceph rados as backend data store
}

enum FsStatus {
  INIT = 0;
  NORMAL = 1;
  DELETED = 2;
  RECYCLING = 3; 
}

enum PartitionType {
  MONOLITHIC_PARTITION = 0;
  PARENT_ID_HASH_PARTITION = 1;
}

enum FileType {
  DIRECTORY = 0;
  FILE = 1;
  SYM_LINK = 2;
};

message MountPoint {
  string client_id = 1;
  string hostname = 2;
  uint32 port = 3;
  string path = 4;
  bool cto = 5;
}

message S3Info {
  string ak = 1;
  string sk = 2;
  string endpoint = 3;
  string bucketname = 4;
  uint32 object_prefix = 7;
}

message RadosInfo {
  string mon_host = 1;
  string user_name = 2;
  string key = 3;
  string pool_name = 4;
  string cluster_name = 5;
}

message FsExtra {
  S3Info s3_info = 1;
  RadosInfo rados_info = 2;
}

message MonoPartition { uint64 mds_id = 1; }

message HashPartition {
  message BucketSet { repeated uint32 bucket_ids = 1; }

  // can't modify after create
  uint32 bucket_num = 1;
  // mdsid -> bucketset
  map<uint64, BucketSet> distributions = 2;

  uint32 expect_mds_num = 5;
}

message PartitionPolicy {
  PartitionType type = 1;
  uint64 epoch = 2;

  oneof partition {
    MonoPartition mono = 10;
    HashPartition parent_hash = 11;
  }
}

message RecycleProgress {
  uint64 last_ino = 1;
  uint64 last_time_ms = 2;
}

message FsInfo {
  uint32 fs_id = 1;
  string fs_name = 2;
  FsType fs_type = 3;
  FsStatus status = 4;
  uint64 root_ino = 5;
  uint64 capacity = 6;
  uint64 block_size = 7;
  uint64 chunk_size = 8;
  repeated MountPoint mount_points = 9;
  PartitionPolicy partition_policy = 10;
  bool enable_sum_in_dir = 12; // enable sum in dir
  string owner = 13;
  string uuid = 16;
  FsExtra extra = 20;

  uint32 recycle_time_hour = 15;
  RecycleProgress recycle_progress = 23;

  uint64 create_time_s = 30;
  uint64 last_update_time_ns = 31;

  bool is_deleted = 40;
  uint64 delete_time_s = 41;

  uint64 version = 50;
}

message Slice {
  // slice id
  uint64 id = 1;
  uint32 compaction_version = 2;
  // file offset
  uint64 offset = 3;
  // file logic length
  uint32 len = 4;
  // file size in object storage
  uint32 size = 5;
  bool zero = 6;
}

message Chunk {
  // chunk index
  uint32 index = 1;
  // chunk size
  uint64 chunk_size = 2;
  // block size
  uint64 block_size = 3;
  // slice list
  repeated Slice slices = 4;

  uint64 version = 10;
  uint64 last_compaction_time_ms = 11;
}

message Dentry {
  uint32 fs_id = 1;
  uint64 ino = 2;
  uint64 parent = 3;
  string name = 4;
  uint32 flag = 5;
  FileType type = 6;
}

message Inode {
  uint32 fs_id = 1;
  uint64 ino = 2;
  uint64 length = 3;
  uint64 ctime = 4;
  uint64 mtime = 5;
  uint64 atime = 6;
  uint32 uid = 10;
  uint32 gid = 11;
  uint32 mode = 12;
  uint32 nlink = 13;
  FileType type = 14;
  string symlink = 15;
  uint64 rdev = 16;
  uint32 dtime = 17;
  uint32 openmpcount = 18;
  repeated uint64 parents = 19;
  uint32 flags = 20;
  map<string, bytes> xattrs = 21;

  // when change field, need to update version
  uint64 version = 30;
}

message RequestInfo {
  string request_id = 1;
  // client request timeout in milliseconds
  uint32 timeout_ms = 2;
}

message TimeInfo {
  message ElapsedTime {
    string name = 1;
    uint64 time_us = 2;
  }

  uint64 total_time_us = 1;
  uint64 queue_wait_time_us = 2;
  repeated ElapsedTime elapsed_times = 3;
}

message CacheInfo {
  bool is_hit_partition = 1;
  bool is_hit_inode = 2;
}

message TxnInfo {
  uint64 txn_id = 1;
  bool is_one_pc = 2;
  bool is_conflict = 3;
  uint64 read_time_us = 4;
  uint64 write_time_us = 5;
}

message ResponseInfo {
  TimeInfo time = 1;
  CacheInfo cache = 2;
  repeated TxnInfo txns = 3;
  Location redirect_location = 4;
}

message Context {
  // partition distribution epoch
  uint64 epoch = 1;

  uint64 inode_version = 3;

  // ignore cache
  bool is_bypass_cache = 5;

  // host:port:path
  string client_id = 10;

  // ino list from node to root
  repeated uint64 ancestors = 11;
}

message EchoRequest {
  RequestInfo info = 1;
  Context context = 2;

  string message = 10;
}

message EchoResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  string message = 10;
}

message HeartbeatRequest {
  RequestInfo info = 1;
  Context context = 2;

  Role role = 10;
  oneof node {
    MDS mds = 20;
    Client client = 21;
    CacheGroupMember cache_group_member = 22;
  }
}

message HeartbeatResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
}

message GetMDSListRequest {
  RequestInfo info = 1;
  Context context = 2;
}

message GetMDSListResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  repeated MDS mdses = 10;
}

// fs interface

message CreateFsRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 9; // optional
  string fs_name = 10;
  uint64 block_size = 11;
  uint64 chunk_size = 12;
  FsType fs_type = 13;
  FsExtra fs_extra = 14;
  bool enable_sum_in_dir = 15;
  string owner = 16;
  uint64 capacity = 17;
  uint32 recycle_time_hour = 18;
  PartitionType partition_type = 19;
  uint32 expect_mds_num = 20; // for hash partition
  repeated uint64 candidate_mds_ids = 21;
}

message CreateFsResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  FsInfo fs_info = 10;
}

message MountFsRequest {
  RequestInfo info = 1;
  Context context = 2;

  string fs_name = 10;
  MountPoint mount_point = 11;
}

message MountFsResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
}

message UmountFsRequest {
  RequestInfo info = 1;
  Context context = 2;

  string fs_name = 10;
  string client_id = 11;
}

message UmountFsResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
}

message DeleteFsRequest {
  RequestInfo info = 1;
  Context context = 2;

  string fs_name = 10;
  // force delete, check if fs is mounted
  // if true, delete fs even if it is mounted
  // if false, return error if it is mounted
  bool is_force = 11;
}

message DeleteFsResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
}

message GetFsInfoRequest {
  RequestInfo info = 1;
  Context context = 2;

  // fs name or fs id
  string fs_name = 10;
  uint32 fs_id = 11;
}

message GetFsInfoResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  FsInfo fs_info = 10;
}

message ListFsInfoRequest {
  RequestInfo info = 1;
  Context context = 2;
}

message ListFsInfoResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  repeated FsInfo fs_infos = 10;
}

message UpdateFsInfoRequest {
  RequestInfo info = 1;
  Context context = 2;

  string fs_name = 10;
  FsInfo fs_info = 11;
}

message UpdateFsInfoResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
}

// dentry interface
message GetDentryRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 parent = 11;
  string name = 12;
}

message GetDentryResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  Dentry dentry = 10;
}

message ListDentryRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 parent = 11;
  // the name of last entry
  string last = 12;
  // the number of entry, default is UINT32_MAX
  uint32 limit = 13;
  // is only list dir
  bool is_only_dir = 14;
}

message ListDentryResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  repeated Dentry dentries = 10;
}

// inode interface
message GetInodeRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;
}

message GetInodeResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  optional Inode inode = 10;
}

message BatchGetInodeRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  repeated uint64 inoes = 11;
}

message BatchGetInodeResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  repeated Inode inodes = 10;
}

message BatchGetXAttrRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  repeated uint64 inoes = 11;
}

message XAttr {
  uint64 ino = 1;
  map<string, bytes> xattrs = 2;
}

message BatchGetXAttrResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  repeated XAttr xattrs = 10;
}

// quota interface

message Quota {
  int64 max_bytes = 1;
  int64 max_inodes = 2;
  int64 used_bytes = 3;
  int64 used_inodes = 4;

  string uuid = 9;
  uint64 version = 10;
  uint64 create_time_ns = 11;
};

message Usage {
  int64 bytes = 1;
  int64 inodes = 2;
  uint64 time_ns = 5;
};

message SetFsQuotaRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  Quota quota = 11;
};

message SetFsQuotaResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
};

message GetFsQuotaRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
};

message GetFsQuotaResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  Quota quota = 10;
};

message SetDirQuotaRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;
  Quota quota = 12;
};

message SetDirQuotaResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
};

message GetDirQuotaRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;
};

message GetDirQuotaResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  Quota quota = 10;
};

message DeleteDirQuotaRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;
};

message DeleteDirQuotaResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
};

message LoadDirQuotasRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 4;
};

message LoadDirQuotasResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  map<uint64, Quota> quotas = 10;
};

// high level interface

message LookupRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 parent = 11;
  string name = 12;
}

message LookupResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  Inode inode = 10;
}

message BatchCreateRequest {
  message Param {
    string name = 1;
    uint32 flag = 2;
    uint64 length = 3;
    uint32 uid = 4;
    uint32 gid = 5;
    uint32 mode = 6;
    uint64 rdev = 7;
  }

  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 parent = 11;
  repeated Param params = 12;
}

message BatchCreateResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  repeated Inode inodes = 10;
  repeated string session_ids = 11;
  uint64 parent_version = 12;
}

message MkNodRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  string name = 11;
  uint32 flag = 12;
  uint64 length = 13;
  uint32 uid = 14;
  uint32 gid = 15;
  uint32 mode = 16;
  uint64 parent = 18;
  uint64 rdev = 19;
}

message MkNodResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  Inode inode = 10;
  uint64 parent_version = 11;
}

message MkDirRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  string name = 11;
  uint32 flag = 12;
  uint64 length = 13;
  uint32 uid = 14;
  uint32 gid = 15;
  uint32 mode = 16;
  uint64 parent = 18;
  uint64 rdev = 19;
}

message MkDirResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  Inode inode = 10;
  uint64 parent_version = 11;
}

message RmDirRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 parent = 11;
  string name = 12;
}

message RmDirResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  uint64 parent_version = 10;
}

message ReadDirRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;

  string last_name = 12;
  uint32 limit = 13;

  bool with_attr = 14;

  bool is_refresh = 15;
}

message ReadDirResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  message Entry {
    string name = 1;
    uint64 ino = 2;
    Inode inode = 3;
  }

  repeated Entry entries = 10;
}

message FileSession {
  uint32 fs_id = 1;
  uint64 ino = 2;
  string client_id = 3;
  string session_id = 4;

  uint64 create_time_s = 10;
}

message OpenRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;
  uint32 flags = 12;
  bool prefetch_chunk = 13;
}

message OpenResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  string session_id = 10;
  Inode inode = 11;
  repeated Chunk chunks = 12;
}

message ReleaseRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;
  string session_id = 12;
}

message ReleaseResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
}

message LinkRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;
  uint64 new_parent = 12;
  string new_name = 13;
}

message LinkResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  Inode inode = 10;
  uint64 parent_version = 11;
}

message UnLinkRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 parent = 11;
  string name = 12;
}

message UnLinkResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  uint64 parent_version = 10;
}

message SymlinkRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 new_parent = 11;
  string new_name = 12;
  uint32 uid = 13;
  uint32 gid = 14;
  string symlink = 15;
}

message SymlinkResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  Inode inode = 10;
  uint64 parent_version = 11;
}

message ReadLinkRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;
}

message ReadLinkResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  string symlink = 10;
}

message GetAttrRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;
}

message GetAttrResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  Inode inode = 10;
}

message SetAttrRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;

  uint32 to_set = 12;

  uint64 length = 20;
  uint64 ctime = 21;
  uint64 mtime = 22;
  uint64 atime = 23;
  uint32 uid = 24;
  uint32 gid = 25;
  uint32 mode = 26;
  uint32 flags = 27;
}

message SetAttrResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  Inode inode = 10;
}

message GetXAttrRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;
  string name = 12;
}

message GetXAttrResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  bytes value = 10;
}

message SetXAttrRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;

  map<string, bytes> xattrs = 12;
}

message SetXAttrResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  Inode inode = 10;
}

message RemoveXAttrRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;
  string name = 12;
}

message RemoveXAttrResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  Inode inode = 10;
}

message ListXAttrRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;
}

message ListXAttrResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  map<string, bytes> xattrs = 10;
}

message RenameRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 old_parent = 11;
  string old_name = 12;
  uint64 new_parent = 13;
  string new_name = 14;

  repeated uint64 old_ancestors = 20;
  repeated uint64 new_ancestors = 21;
}

message RenameResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  uint64 old_parent_version = 10;
  uint64 new_parent_version = 11;
}

message AllocSliceIdRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 alloc_num = 10;
  // alloc slice id must be greater than this value
  // this is used to avoid slice id rollback
  uint64 min_slice_id = 11;
}

message AllocSliceIdResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  uint64 slice_id = 10;
}

message WriteSliceRequest {
  message DeltaSlice {
    uint64 chunk_index = 1;
    repeated Slice slices = 2;
  }

  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 parent = 11;
  uint64 ino = 12;

  repeated DeltaSlice delta_slices = 15;
}

message WriteSliceResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
}

message ReadSliceRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;
  repeated uint64 chunk_indexes = 13;
}

message ReadSliceResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  repeated Chunk chunks = 10;
}

message FallocateRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;

  // 0: default
  // FALLOC_FL_KEEP_SIZE
  // FALLOC_FL_PUNCH_HOLE
  // FALLOC_FL_COLLAPSE_RANGE
  // FALLOC_FL_ZERO_RANGE
  int32 mode = 12;
  // file offset
  uint64 offset = 13;
  // file logic length
  uint64 len = 14;
}

message FallocateResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  Inode inode = 10;
}

message TrashSlice {
  message Range {
    // file offset
    uint64 offset = 1;
    // file logic length
    uint64 len = 2;
    uint64 compaction_version = 3;
  }

  uint32 fs_id = 1;
  uint64 ino = 2;
  uint64 chunk_index = 3;
  uint64 slice_id = 4;
  uint64 block_size = 5;
  uint64 chunk_size = 6;

  bool is_partial = 7;
  repeated Range ranges = 8;
}

message TrashSliceList {
  repeated TrashSlice slices = 1;
  uint64 time_ms = 2;
}

message CompactChunkRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;
  uint64 chunk_index = 12;
}

message CompactChunkResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  repeated TrashSlice trash_slices = 10;
}

message CleanTrashSliceRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;
  // 0 means all chunks
  uint64 chunk_index = 12;
}

message CleanTrashSliceResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
}

message CleanDelFileRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 ino = 11;
}

message CleanDelFileResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
}

message FsStatsData {
  uint64 read_bytes = 1;
  uint64 read_qps = 2;
  uint64 write_bytes = 3;
  uint64 write_qps = 4;
  uint64 s3_read_bytes = 5;
  uint64 s3_read_qps = 6;
  uint64 s3_write_bytes = 7;
  uint64 s3_write_qps = 8;
}

message SetFsStatsRequest {
  RequestInfo info = 1;
  Context context = 2;

  string fs_name = 10;
  FsStatsData stats = 11;
}

message SetFsStatsResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
}

message GetFsStatsRequest {
  RequestInfo info = 1;
  Context context = 2;

  string fs_name = 10;
}

message GetFsStatsResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  FsStatsData stats = 10;
}

message GetFsPerSecondStatsRequest {
  RequestInfo info = 1;
  Context context = 2;

  string fs_name = 10;
}

message GetFsPerSecondStatsResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  // time_s -> stats
  map<uint64, FsStatsData> stats = 10;
}

message CheckAliveRequest {
  RequestInfo info = 1;
  Context context = 2;
}

message CheckAliveResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
}

message NotifyBuddyRequest {
  RequestInfo info = 1;
  Context context = 2;

  enum Type {
    TYPE_REFRESH_FS_INFO = 0;
    TYPE_REFRESH_INODE = 1;
    TYPE_CLEAN_PARTITION_CACHE = 2;
    TYPE_SET_DIR_QUOTA = 3;
    TYPE_DELETE_DIR_QUOTA = 4;
  }

  message RefreshFsInfo { string fs_name = 1; }

  message RefreshInode { Inode inode = 1; }

  message CleanPartitionCache {
    uint32 fs_id = 1;
    uint64 Ino = 2;
  }

  message SetDirQuota {
    uint64 ino = 1;
    Quota quota = 2;
  }

  message DeleteDirQuota {
    uint64 ino = 1;
    string uuid = 2;
  }

  message Message {
    // message id
    uint64 id = 1;
    Type type = 2;
    uint32 fs_id = 3;

    oneof payload {
      RefreshFsInfo refresh_fs_info = 100;
      RefreshInode refresh_inode = 101;
      CleanPartitionCache clean_partition_cache = 102;
      SetDirQuota set_dir_quota = 103;
      DeleteDirQuota delete_dir_quota = 104;
    }
  }

  // notify id
  uint64 id = 10;
  repeated Message messages = 11;
}

message NotifyBuddyResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
}

message FsOpLog {
  enum Type {
    CREATE_FS = 0;
    JOIN_FS = 1;
    QUIT_FS = 2;
    QUIT_AND_JOIN_FS = 3;
    DELETE_FS = 4;
    UPDATE_STATE_FS = 6;
  }

  message CreateFs {}
  message JoinFs { repeated uint64 mds_ids = 1; }
  message QuitFs { repeated uint64 mds_ids = 1; }
  message QuitAndJoinFs {
    repeated uint64 quit_mds_ids = 1;
    repeated uint64 join_mds_ids = 2;
  }
  message DeleteFs {}
  message UpdateStateFs {
    FsStatus old_status = 1;
    FsStatus new_status = 2;
  }

  string fs_name = 1;
  uint32 fs_id = 2;

  Type type = 3;
  uint64 epoch = 4;
  string comment = 5;

  oneof config {
    CreateFs create_fs = 10;
    JoinFs join_fs = 11;
    QuitFs quit_fs = 12;
    QuitAndJoinFs quit_and_join_fs = 13;
    DeleteFs delete_fs = 14;
    UpdateStateFs update_state_fs = 15;
  }

  uint64 time_ms = 20;
}

message JoinFsRequest {
  RequestInfo info = 1;
  Context context = 2;

  // fs name or fs id just one of them
  uint32 fs_id = 10;
  string fs_name = 11;
  repeated uint64 mds_ids = 12;
}

message JoinFsResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  uint64 epoch = 10;
}

message QuitFsRequest {
  RequestInfo info = 1;
  Context context = 2;

  // fs name or fs id just one of them
  uint32 fs_id = 10;
  string fs_name = 11;
  repeated uint64 mds_ids = 12;
}

message QuitFsResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  uint64 epoch = 10;
}

message StopMdsRequest {
  RequestInfo info = 1;
  Context context = 2;

  uint64 mds_id = 10;
}

message StopMdsResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
}

// cache group interface
message ReweightMemberRequest {
  RequestInfo info = 1;

  string member_id = 2;
  string ip = 3;
  uint32 port = 4;
  uint32 weight = 5;
};

message ReweightMemberResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
};

message ListMembersRequest {
  RequestInfo info = 1;

  optional string group_name = 2; // if not set, list all members
};

message ListMembersResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  repeated CacheGroupMember members = 3;
};

message JoinCacheGroupRequest {
  RequestInfo info = 1;

  string member_id = 2;
  string ip = 3;
  uint32 port = 4;
  string group_name = 5;
  uint32 weight = 6;
};

message JoinCacheGroupResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
};

message LeaveCacheGroupRequest {
  RequestInfo info = 1;

  string member_id = 2;
  string ip = 3;
  uint32 port = 4;
  string group_name = 5;
};

message LeaveCacheGroupResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
};

message ListGroupsRequest { RequestInfo info = 1; };

message ListGroupsResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  repeated string group_names = 3;
};

message UnLockMemberRequest {
  RequestInfo info = 1;

  string member_id = 2;
  string ip = 3;
  uint32 port = 4;
};

message UnLockMemberResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
};

message DeleteMemberRequest {
  RequestInfo info = 1;

  string member_id = 2;
};

message DeleteMemberResponse {
  ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
};

service MDSService {
  rpc Echo(EchoRequest) returns (EchoResponse);

  // mds
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  rpc GetMDSList(GetMDSListRequest) returns (GetMDSListResponse);

  // fs interface
  rpc CreateFs(CreateFsRequest) returns (CreateFsResponse);
  rpc MountFs(MountFsRequest) returns (MountFsResponse);
  rpc UmountFs(UmountFsRequest) returns (UmountFsResponse);
  rpc DeleteFs(DeleteFsRequest) returns (DeleteFsResponse);
  rpc GetFsInfo(GetFsInfoRequest) returns (GetFsInfoResponse);
  rpc ListFsInfo(ListFsInfoRequest) returns (ListFsInfoResponse);
  rpc UpdateFsInfo(UpdateFsInfoRequest) returns (UpdateFsInfoResponse);

  // dentry interface
  rpc GetDentry(GetDentryRequest) returns (GetDentryResponse);
  rpc ListDentry(ListDentryRequest) returns (ListDentryResponse);

  // inode interface
  rpc GetInode(GetInodeRequest) returns (GetInodeResponse);
  rpc BatchGetInode(BatchGetInodeRequest) returns (BatchGetInodeResponse);
  rpc BatchGetXAttr(BatchGetXAttrRequest) returns (BatchGetXAttrResponse);

  // high level interface
  rpc Lookup(LookupRequest) returns (LookupResponse);

  rpc BatchCreate(BatchCreateRequest) returns (BatchCreateResponse);

  rpc MkNod(MkNodRequest) returns (MkNodResponse);
  rpc MkDir(MkDirRequest) returns (MkDirResponse);
  rpc RmDir(RmDirRequest) returns (RmDirResponse);
  rpc ReadDir(ReadDirRequest) returns (ReadDirResponse);

  rpc Open(OpenRequest) returns (OpenResponse);
  rpc Release(ReleaseRequest) returns (ReleaseResponse);

  rpc Link(LinkRequest) returns (LinkResponse);
  rpc UnLink(UnLinkRequest) returns (UnLinkResponse);
  rpc Symlink(SymlinkRequest) returns (SymlinkResponse);
  rpc ReadLink(ReadLinkRequest) returns (ReadLinkResponse);

  rpc GetAttr(GetAttrRequest) returns (GetAttrResponse);
  rpc SetAttr(SetAttrRequest) returns (SetAttrResponse);
  rpc GetXAttr(GetXAttrRequest) returns (GetXAttrResponse);
  rpc SetXAttr(SetXAttrRequest) returns (SetXAttrResponse);
  rpc RemoveXAttr(RemoveXAttrRequest) returns (RemoveXAttrResponse);
  rpc ListXAttr(ListXAttrRequest) returns (ListXAttrResponse);

  rpc Rename(RenameRequest) returns (RenameResponse);

  // slice interface
  rpc AllocSliceId(AllocSliceIdRequest) returns (AllocSliceIdResponse);
  rpc WriteSlice(WriteSliceRequest) returns (WriteSliceResponse);
  rpc ReadSlice(ReadSliceRequest) returns (ReadSliceResponse);

  // fallocate interface
  rpc Fallocate(FallocateRequest) returns (FallocateResponse);

  // compact interface
  rpc CompactChunk(CompactChunkRequest) returns (CompactChunkResponse);
  rpc CleanTrashSlice(CleanTrashSliceRequest) returns (CleanTrashSliceResponse);
  rpc CleanDelFile(CleanDelFileRequest) returns (CleanDelFileResponse);

  // quota interface
  rpc SetFsQuota(SetFsQuotaRequest) returns (SetFsQuotaResponse);
  rpc GetFsQuota(GetFsQuotaRequest) returns (GetFsQuotaResponse);
  rpc SetDirQuota(SetDirQuotaRequest) returns (SetDirQuotaResponse);
  rpc GetDirQuota(GetDirQuotaRequest) returns (GetDirQuotaResponse);
  rpc DeleteDirQuota(DeleteDirQuotaRequest) returns (DeleteDirQuotaResponse);
  rpc LoadDirQuotas(LoadDirQuotasRequest) returns (LoadDirQuotasResponse);

  // fs statistics
  rpc SetFsStats(SetFsStatsRequest) returns (SetFsStatsResponse);
  rpc GetFsStats(GetFsStatsRequest) returns (GetFsStatsResponse);
  rpc GetFsPerSecondStats(GetFsPerSecondStatsRequest)
      returns (GetFsPerSecondStatsResponse);

  // internal interface
  rpc CheckAlive(CheckAliveRequest) returns (CheckAliveResponse);
  rpc NotifyBuddy(NotifyBuddyRequest) returns (NotifyBuddyResponse);

  rpc JoinFs(JoinFsRequest) returns (JoinFsResponse);
  rpc QuitFs(QuitFsRequest) returns (QuitFsResponse);
  rpc StopMds(StopMdsRequest) returns (StopMdsResponse);

  // cache group member interface
  rpc JoinCacheGroup(JoinCacheGroupRequest) returns (JoinCacheGroupResponse);
  rpc LeaveCacheGroup(LeaveCacheGroupRequest) returns (LeaveCacheGroupResponse);
  rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse);
  rpc ReweightMember(ReweightMemberRequest) returns (ReweightMemberResponse);
  rpc ListMembers(ListMembersRequest) returns (ListMembersResponse);
  rpc UnlockMember(UnLockMemberRequest) returns (UnLockMemberResponse);
  rpc DeleteMember(DeleteMemberRequest) returns (DeleteMemberResponse);
}
